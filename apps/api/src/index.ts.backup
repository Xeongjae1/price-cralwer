import Fastify from "fastify";
import { TypeBoxTypeProvider } from "@fastify/type-provider-typebox";
import "dotenv/config";

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ import
import { testConnection } from "@repo/database";

// ÌîåÎü¨Í∑∏Ïù∏Í≥º ÎùºÏö∞ÌÑ∞ import
import plugins from "./plugins/index";
import routes from "./routes/index";

const isDev = process.env.NODE_ENV !== "production";

const fastify = Fastify({
  logger: isDev
    ? {
        level: "info",
        transport: {
          target: "pino-pretty",
          options: {
            colorize: true,
            translateTime: "HH:MM:ss",
            ignore: "pid,hostname",
          },
        },
      }
    : true,
}).withTypeProvider<TypeBoxTypeProvider>();

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
async function initializeDatabase() {
  try {
    const isConnected = await testConnection();
    if (!isConnected) {
      throw new Error("Database connection failed");
    }
    console.log("‚úÖ Database initialized successfully");
  } catch (error) {
    console.error("‚ùå Database initialization failed:", error);
    process.exit(1);
  }
}

// ÌîåÎü¨Í∑∏Ïù∏ Îì±Î°ù
await fastify.register(plugins);

// ÎùºÏö∞Ìä∏ Îì±Î°ù
await fastify.register(routes);

// ÏóêÎü¨ Ìï∏Îì§Îü¨
fastify.setErrorHandler((error, request, reply) => {
  fastify.log.error(error);

  reply.status(500).send({
    success: false,
    error: "Internal Server Error",
    message: isDev ? error.message : "Something went wrong",
  });
});

// 404 Ìï∏Îì§Îü¨
fastify.setNotFoundHandler((request, reply) => {
  reply.status(404).send({
    success: false,
    error: "Not Found",
    message: `Route ${request.method} ${request.url} not found`,
  });
});

// ÏÑúÎ≤Ñ ÏãúÏûë
const start = async () => {
  try {
    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî
    await initializeDatabase();

    const port = Number(process.env.PORT) || 3001;
    const host = process.env.HOST || "0.0.0.0";

    await fastify.listen({ port, host });

    console.log("üöÄ Server listening on http://localhost:" + port);
    console.log("üìö API Documentation: http://localhost:" + port + "/docs");
    console.log("üîå WebSocket: ws://localhost:" + port + "/ws");
    console.log("‚ù§Ô∏è  Health Check: http://localhost:" + port + "/health");
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};

// Graceful shutdown
const gracefulShutdown = async (signal: string) => {
  fastify.log.info(`Received ${signal}, shutting down gracefully`);

  try {
    await fastify.close();
    console.log("üîå Database connection closed");
    process.exit(0);
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};

process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));
process.on("SIGINT", () => gracefulShutdown("SIGINT"));

start();
